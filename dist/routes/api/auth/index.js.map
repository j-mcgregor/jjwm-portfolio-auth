{"version":3,"sources":["../../../../src/routes/api/auth/index.js"],"names":["router","express","Router","post","req","res","email","password","body","errors","match","user","User","findOne","bcrypt","compare","Object","keys","length","status","json","id","firstName","lastName","token","jwt","sign","config","secret","expiresIn","header","payload","signature","split","cookie","expires","Date","now","httpOnly","auth","password2","newUser","salt","genSalt","hash","e","userSaved","save","get","authMiddleware","next","isAuthenticated","loggedOut","error","newPassword","newPasswordConfirm","wrongPassword","message"],"mappings":"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","sourcesContent":["import express from 'express';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport config from '../../../../config';\nimport User from '../../../models/User';\nimport authMiddleware from '../../../lib/authMiddleware';\n\nconst router = express.Router();\n\n// @route    POST /auth/register\n// @desc     Login in a User\n// @access   Public\n\nrouter.post('/login', async (req, res) => {\n  const { email, password } = req.body;\n  const errors = {};\n  let match;\n  const user = await User.findOne({ email });\n\n  if (!user) {\n    errors.email = 'User not found';\n  } else {\n    match = await bcrypt.compare(password, user.password);\n  }\n\n  if (!match) {\n    errors.password = 'Wrong password';\n  }\n\n  if (Object.keys(errors).length > 0) {\n    return res.status(400).json({ errors });\n  }\n\n  const body = {\n    id: user.id,\n    email: user.email,\n    firstName: user.firstName,\n    lastName: user.lastName\n  };\n\n  const token = await jwt.sign(body, config.secret, { expiresIn: 3600 });\n\n  const [header, payload, signature] = token.split('.');\n\n  res.cookie('COOKIE_1', `${header}.${payload}`, {\n    expires: new Date(Date.now() + 1800000)\n  });\n  res.cookie('COOKIE_2', signature, { httpOnly: true });\n\n  res.json({ user, token, auth: true });\n});\n\n// @route    POST /users/register\n// @desc     Register a User\n// @access   Public\n\nrouter.post('/register', async (req, res) => {\n  const { firstName, lastName, email, password, password2 } = req.body;\n  const errors = {};\n  const user = await User.findOne({ email });\n\n  if (password !== password2) {\n    errors.password = \"Passwords don't match\";\n    errors.password2 = \"Passwords don't match\";\n    return res.status(400).json({ errors });\n  }\n\n  if (user) {\n    errors.email = 'Email already exists';\n    return res.status(400).json({ errors });\n  }\n\n  const newUser = new User({\n    firstName,\n    lastName,\n    email,\n    password\n  });\n\n  const salt = await bcrypt.genSalt(10);\n\n  try {\n    const hash = await bcrypt.hash(newUser.password, salt);\n    newUser.password = hash;\n  } catch (e) {\n    res.json(e);\n  }\n\n  try {\n    const userSaved = await newUser.save();\n    res.json({ user: userSaved });\n  } catch (e) {\n    res.json(e);\n  }\n});\n\nrouter.get('/verifyUser', authMiddleware, (req, res, next) => {\n  res.json({ isAuthenticated: true });\n});\n\nrouter.get('/logout', (req, res, next) => {\n  res.cookie('COOKIE_1', '');\n  res.cookie('COOKIE_2', '');\n\n  res.json({ loggedOut: true, isAuthenticated: false });\n});\n\nrouter.get('/currentUser', authMiddleware, async (req, res) => {\n  const { email } = req.user;\n\n  try {\n    const user = await User.findOne({ email });\n    res.json({ user });\n  } catch (error) {\n    res.json({ error });\n  }\n});\n\nrouter.post('/verifyPassword', authMiddleware, async (req, res) => {\n  const { email, password, newPassword, newPasswordConfirm } = req.body;\n  const errors = {};\n\n  const user = await User.findOne({ email });\n  const match = await bcrypt.compare(password, user.password);\n\n  if (!match) {\n    errors.wrongPassword = 'You must enter your current password';\n  }\n\n  if (newPassword !== newPasswordConfirm) {\n    errors.password = \"Passwords don't match\";\n  }\n\n  const salt = await bcrypt.genSalt(10);\n\n  try {\n    const hash = await bcrypt.hash(newPassword, salt);\n    user.password = hash;\n    user.save();\n  } catch (e) {\n    res.json(e);\n  }\n\n  if (Object.keys(errors).length > 0) {\n    return res.status(400).json({ errors });\n  } else {\n    return res.status(201).json({ message: 'Success' });\n  }\n});\n\nexport default router;\n"],"file":"index.js"}